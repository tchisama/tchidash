import { NextRequest, NextResponse } from "next/server";
import {
  collection,
  query,
  where,
  getDocs,
  addDoc,
  Timestamp,
  updateDoc,
  doc,
  increment,
} from "firebase/firestore";
import { db } from "@/firebase"; // Adjust this import based on your Firebase setup
import { Order } from "@/types/order";
import { OrderItem } from "@/types/order";
import { Customer } from "@/types/customer";

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const storeId = searchParams.get("storeId");

  if (!storeId) {
    return NextResponse.json({ error: "storeId is required" }, { status: 400 });
  }

  try {
    const data = await getDocs(
      query(collection(db, "orders"), where("storeId", "==", storeId)),
    ).then((response) =>
      response.docs.map((doc) => ({ ...doc.data(), id: doc.id }) as Order),
    );
    return NextResponse.json({
      storeId,
      data,
    });
  } catch (error) {
    console.error("Error fetching orders:", error);
    return NextResponse.json(
      { error: "Failed to fetch orders" },
      { status: 500 },
    );
  }
}

export async function POST(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const storeId = searchParams.get("storeId");

  // create New Order
  const body = await request.json();
  const order = {
    ...body,
    storeId,
    createdAt: Timestamp.now(),
    updatedAt: Timestamp.now(),
  } as Order;

  if (!order.customer.firstName)
    return NextResponse.json(
      { error: "Please enter the first name" },
      { status: 400 },
    );
  if (!order.customer.lastName)
    return NextResponse.json(
      { error: "Please enter the last name" },
      { status: 400 },
    );
  if (!order.customer.phoneNumber)
    return NextResponse.json(
      { error: "Please enter the phone number" },
      { status: 400 },
    );
  if (!order.customer.shippingAddress.address)
    return NextResponse.json(
      { error: "Please enter the shipping address" },
      { status: 400 },
    );
  if (!order.customer.shippingAddress.city)
    return NextResponse.json(
      { error: "Please enter the shipping city" },
      { status: 400 },
    );
  if (!order.items.length)
    return NextResponse.json(
      { error: "Please add at least one item" },
      { status: 400 },
    );

  //
  //
  //
  const { items } = order;

  const subtotal = items.reduce(
    (acc, item) => acc + item.price * item.quantity,
    0,
  );
  const totalItems = items.reduce((acc, item) => acc + item.quantity, 0);

  const getTotalPriceFromItem = (item: OrderItem) => {
    const unitPrice = item.price;
    const quantity = item.quantity;
    const discount =
      item.discount?.type == "fixed"
        ? item.discount.amount
        : (unitPrice * (item.discount?.amount || 0)) / 100;
    return (unitPrice - discount) * quantity;
  };
  const total = items.reduce(
    (acc, item) => acc + getTotalPriceFromItem(item),
    0,
  );
  const shippingCost = order.shippingInfo.cost || 0;
  const discountAmount = items.reduce(
    (acc, item) =>
      acc +
      (item.discount?.type == "fixed"
        ? item.discount.amount
        : (item.price * (item.discount?.amount || 0)) / 100) *
        item.quantity,
    0,
  );

  order.subtotal = subtotal;
  order.totalItems = totalItems;
  order.totalPrice = total + shippingCost;
  order.discountAmount = discountAmount;

  const createdOrder = await addDoc(collection(db, "orders"), order).then(
    (response) => response.id,
  );

  const newCustomer: Customer = {
    id: "", // Auto-generated by Firebase Firestore
    firstName: order.customer.firstName,
    lastName: order.customer.lastName,
    email: order.customer.email || "", // Optional depending on your form
    phoneNumber: order.customer.phoneNumber,
    address: {
      street: order.customer.shippingAddress.address,
      city: order.customer.shippingAddress.city,
      postalCode: order.customer?.shippingAddress?.postalCode || "",
      country: order.customer?.shippingAddress?.country || "",
    },
    status: "active", // Default status for new customers
    createdAt: Timestamp.now(),
    updatedAt: Timestamp.now(),
    isEmailVerified: false, // Depends on your flow
    purchaseCount: 1, // Optional
    totalAmountSpent: order.totalPrice,
    storeId: order.storeId,
  };

  try {
    // Check if customer already exists based on phone number or email
    const customerQuery = query(
      collection(db, "customers"),
      where("phoneNumber", "==", newCustomer.phoneNumber),
    );
    const customerSnapshot = await getDocs(customerQuery);

    if (customerSnapshot.empty) {
      // No existing customer found, create a new customer
      const customerDocRef = await addDoc(
        collection(db, "customers"),
        newCustomer,
      );
      console.log("New customer created with ID:", customerDocRef.id);
    } else {
      // increment customer purchase count
      updateDoc(doc(db, "customers", customerSnapshot.docs[0].id), {
        purchaseCount: increment(1),
        totalAmountSpent: increment(order.totalPrice),
      });
    }
    // router.push("/dashboard/orders");
  } catch (error) {
    console.error("Error creating customer or order:", error);
  }

  if (!createdOrder) {
    return NextResponse.json(
      { error: "Failed to create order" },
      { status: 500 },
    );
  }
  return NextResponse.json({
    createdOrder,
  });
}

